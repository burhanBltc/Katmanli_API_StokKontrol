@model IEnumerable<_01_Stok.Entities.Models.Concrete.Product>
@* İçindeki metot parametresiyle ilgili. ASP.NET Core MVC'de View'da veri sergilerken, çoğu zaman IEnumerable<T> kullanmak daha yaygındır ve önerilir. Çünkü: IEnumerable<T>, veri üzerinde sadece okuma işlemleri yapmamızı sağlar. IEnumerable<T>, genellikle daha esnek ve hafif bir veri türüdür.
  List<T> koleksiyonu, veri üzerinde değişiklik yapmanızı gerektiren durumlar için uygundur. Dolayısıyla, siz List<Product> verisini Controller'dan View'a gönderiyorsunuz, ancak View'da veri sergilerken, IEnumerable<Product> tipi kullanarak veriyi okuma amaçlı gösteriyorsunuz. Bu, MVC'nin yapısal tavsiyesidir ve genellikle bu yaklaşımda herhangi bir sorun yaşamazsınız.
Sonuç: Controller'da List<Product> verisini elde ediyorsunuz, ancak View'da IEnumerable<Product> kullanmak, View'ın sadece veriyi görüntülemeye yönelik olduğunu ve veri üzerinde herhangi bir değişiklik yapılmadığını varsayar. Bu, performans ve esneklik açısından daha verimli bir yaklaşım olarak kabul edilir. *@

@{
    ViewData["Title"] = "List";
}

<h1>List</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ProductName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Stock)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.CategoryId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SupplierId)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.IsActive)
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ProductName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Stock)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.Category.CategoryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Suplier.SupplierName)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.IsActive)
                </td>


                <td>
                    <a asp-action="Update" asp-route-id="@item.ID" class="btn btn-outline-success">GÜNCELLE</a>
                    @if (item.IsActive)
                    {
                        <a asp-action="MakePassive" asp-route-id="@item.ID" class="btn btn-outline-danger">PASİF ET</a>
                    }
                    else
                    {
                        <a asp-action="MakeActive" asp-route-id="@item.ID" class="btn btn-outline-warning">AKTİF ET</a>
                    }

                </td>
            </tr>
        }
    </tbody>
</table>
